// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.13.0
// source: api/cryptogrhapher.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StringHashService_HashStrings_FullMethodName = "/stringhash.StringHashService/HashStrings"
)

// StringHashServiceClient is the client API for StringHashService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StringHashServiceClient interface {
	HashStrings(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StringArrayRequest, HashArrayResponse], error)
}

type stringHashServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStringHashServiceClient(cc grpc.ClientConnInterface) StringHashServiceClient {
	return &stringHashServiceClient{cc}
}

func (c *stringHashServiceClient) HashStrings(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StringArrayRequest, HashArrayResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StringHashService_ServiceDesc.Streams[0], StringHashService_HashStrings_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StringArrayRequest, HashArrayResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StringHashService_HashStringsClient = grpc.BidiStreamingClient[StringArrayRequest, HashArrayResponse]

// StringHashServiceServer is the server API for StringHashService service.
// All implementations must embed UnimplementedStringHashServiceServer
// for forward compatibility.
type StringHashServiceServer interface {
	HashStrings(grpc.BidiStreamingServer[StringArrayRequest, HashArrayResponse]) error
	mustEmbedUnimplementedStringHashServiceServer()
}

// UnimplementedStringHashServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStringHashServiceServer struct{}

func (UnimplementedStringHashServiceServer) HashStrings(grpc.BidiStreamingServer[StringArrayRequest, HashArrayResponse]) error {
	return status.Errorf(codes.Unimplemented, "method HashStrings not implemented")
}
func (UnimplementedStringHashServiceServer) mustEmbedUnimplementedStringHashServiceServer() {}
func (UnimplementedStringHashServiceServer) testEmbeddedByValue()                           {}

// UnsafeStringHashServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StringHashServiceServer will
// result in compilation errors.
type UnsafeStringHashServiceServer interface {
	mustEmbedUnimplementedStringHashServiceServer()
}

func RegisterStringHashServiceServer(s grpc.ServiceRegistrar, srv StringHashServiceServer) {
	// If the following call pancis, it indicates UnimplementedStringHashServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StringHashService_ServiceDesc, srv)
}

func _StringHashService_HashStrings_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StringHashServiceServer).HashStrings(&grpc.GenericServerStream[StringArrayRequest, HashArrayResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StringHashService_HashStringsServer = grpc.BidiStreamingServer[StringArrayRequest, HashArrayResponse]

// StringHashService_ServiceDesc is the grpc.ServiceDesc for StringHashService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StringHashService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stringhash.StringHashService",
	HandlerType: (*StringHashServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HashStrings",
			Handler:       _StringHashService_HashStrings_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/cryptogrhapher.proto",
}
